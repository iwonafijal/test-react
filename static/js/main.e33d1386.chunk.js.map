{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","list","setList","input","setInput","renderListItems","map","item","i","onClick","newArray","splice","onRemoveHandler","console","log","className","value","onChange","event","target","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA0CeA,G,MAvCH,WAAO,IAAD,EACQC,mBAAS,CAAC,MAAO,OAAQ,UADjC,mBACTC,EADS,KACHC,EADG,OAEUF,mBAAS,IAFnB,mBAETG,EAFS,KAEFC,EAFE,KAUVC,EAAkBJ,EAAKK,KAAI,SAACC,EAAMC,GAAP,OAC/B,oBAAYC,QAAS,kBAPC,SAACD,GACvB,IAAME,EAAQ,YAAOT,GACrBS,EAASC,OAAOH,EAAG,GACnBN,EAAQQ,GAImBE,CAAgBJ,IAA3C,SACGD,GADMC,MAkBX,OAFAK,QAAQC,IAAIX,GAGV,sBAAKY,UAAU,MAAf,UACE,4CACA,6BAAKV,IACL,uBAAOW,MAAOb,EAAOc,SAXR,SAACC,GAEhBd,EAASc,EAAMC,OAAOH,QASqBI,KAAK,WAC9C,wBAAQX,QAlBW,WACrBP,EAAQ,GAAD,mBAAKD,GAAL,CAAWE,KAElBC,EAAS,KAeP,6BCzBSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e33d1386.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\n\nconst App = () => {\n  const [list, setList] = useState([\"kot\", \"pies\", \"malpa\"]);\n  const [input, setInput] = useState(\"\");\n\n  const onRemoveHandler = (i) => {\n    const newArray = [...list];\n    newArray.splice(i, 1);\n    setList(newArray);\n  };\n\n  const renderListItems = list.map((item, i) => (\n    <li key={i} onClick={() => onRemoveHandler(i)}>\n      {item}\n    </li>\n  ));\n\n  const onClickHandler = () => {\n    setList([...list, input]);\n    // setList([\"kot\", \"pies\", \"malpa\", \"zaba\"])\n    setInput(\"\");\n  };\n\n  const onChange = (event) => {\n    // console.log(event.target.value);\n    setInput(event.target.value);\n  };\n\n  console.log(input);\n\n  return (\n    <div className=\"App\">\n      <h2>To-do-list</h2>\n      <ul>{renderListItems}</ul>\n      <input value={input} onChange={onChange} name=\"animal\" />\n      <button onClick={onClickHandler}>Add animal</button>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}